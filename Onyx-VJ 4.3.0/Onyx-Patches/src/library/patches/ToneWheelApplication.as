/** * Copyright (c) 2003-2010 "Onyx-VJ Team" which is comprised of: * * Daniel Hai * Stefano Cottafavi * Bruce Lane * * All rights reserved. * * Licensed under the CREATIVE COMMONS Attribution-Noncommercial-Share Alike 3.0 * You may not use this file except in compliance with the License. * You may obtain a copy of the License at: http://creativecommons.org/licenses/by-nc-sa/3.0/us/ * * Please visit http://www.onyx-vj.com for more information *   * Based on ToneWheel code by Andr√© Michelle (http://www.andre-michelle.com) * Adapted for Onyx-VJ by Bruce LANE (http://www.batchass.fr) */package library.patches{	import com.andremichelle.*;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.SampleDataEvent;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.utils.getTimer;	import flash.utils.setTimeout;		import onyx.core.*;	import onyx.parameter.*;	import onyx.plugin.*;
		/**	 * @author aM	 */	//[SWF(width='736',height='512',frameRate='255',backgroundColor='0x00101A')]	public class ToneWheelApplication extends Patch 	{		private const source:BitmapData	= createDefaultBitmap(); 				private var bmp:Bitmap;		private var sprite:Sprite;		static public const BUFFER_SIZE: int = 3072;				static private const TEMPO: Number = 130.0;				private var _sound: Sound;				private var _soundChannel: SoundChannel;				private var _soundLatency: Number;				private var _soundBuffer: Vector.<Vector.<Number>>;		private var _wheels: Vector.<ToneWheel>;		private var _particles: Vector.<ToneParticle>;				private var _position: Number;				private var _lastBuffer: int;		private var _delaySize: int;		private var _delayLine: Vector.<Vector.<Number>>;		private var _delayWriteIndex: int;		private var _x0:int = DISPLAY_WIDTH/6;		private var _y0:int = DISPLAY_HEIGHT - 20;		private var _x1:int = DISPLAY_WIDTH/6*2;		private var _y1:int = DISPLAY_HEIGHT - 20;		private var _x2:int = DISPLAY_WIDTH/6*3;		private var _y2:int = DISPLAY_HEIGHT - 20;		private var _x3:int = DISPLAY_WIDTH/6*4;		private var _y3:int = DISPLAY_HEIGHT - 20;		private var _x4:int = DISPLAY_WIDTH/6*5;		private var _y4:int = DISPLAY_HEIGHT - 20;		private var _wx0:int = 256;		private var _wy0:int = 200;		private var _wx1:int = 200;		private var _wy1:int = 132;		private var _wx2:int = 128;		private var _wy2:int = 74;		public function ToneWheelApplication()		{			Console.output('ToneWheel');			Console.output('Credits to Andre MICHELLE');			Console.output('Adapted by Bruce LANE (http://www.batchass.fr)');			parameters.addParameters(				new ParameterProxy('1st Circle', 'P1 x:y',					new ParameterInteger('x0','x',0,DISPLAY_WIDTH,_x0),					new ParameterInteger('y0','y',0,DISPLAY_HEIGHT,_y0),					{ invert: true }				),				new ParameterProxy('2nd', 'P2 x:y',					new ParameterInteger('x1','x',0,DISPLAY_WIDTH,_x1),					new ParameterInteger('y1','y',0,DISPLAY_HEIGHT,_y1),					{ invert: true }				),				new ParameterProxy('3rd', 'P3 x:y',					new ParameterInteger('x2','x',0,DISPLAY_WIDTH,_x2),					new ParameterInteger('y2','y',0,DISPLAY_HEIGHT,_y2),					{ invert: true }				),				new ParameterProxy('4th', 'P4 x:y',					new ParameterInteger('x3','x',0,DISPLAY_WIDTH,_x3),					new ParameterInteger('y3','y',0,DISPLAY_HEIGHT,_y3),					{ invert: true }				),				new ParameterProxy('5th', 'P5 x:y',					new ParameterInteger('x4','x',0,DISPLAY_WIDTH,_x4),					new ParameterInteger('y4','y',0,DISPLAY_HEIGHT,_y4),					{ invert: true }				),				new ParameterProxy('1st Wheel', 'W1 x:y',					new ParameterInteger('wx0','x',0,DISPLAY_WIDTH,_wx0),					new ParameterInteger('wy0','y',0,DISPLAY_HEIGHT,_wy0),					{ invert: true }				),				new ParameterProxy('2nd Wheel', 'W2 x:y',					new ParameterInteger('wx1','x',0,DISPLAY_WIDTH,_wx1),					new ParameterInteger('wy1','y',0,DISPLAY_HEIGHT,_wy1),					{ invert: true }				),				new ParameterProxy('3rd Wheel', 'W3 x:y',					new ParameterInteger('wx2','x',0,DISPLAY_WIDTH,_wx2),					new ParameterInteger('wy2','y',0,DISPLAY_HEIGHT,_wy2),					{ invert: true }				)			) 			bmp = new Bitmap(new BitmapData(DISPLAY_WIDTH, DISPLAY_HEIGHT, true, 0x00000000));			sprite = new Sprite();			addChild(sprite);			sprite.addChild(bmp);			_init( );		}				public function get particles(): Vector.<ToneParticle>		{			return _particles;		}		public function positionToNumSamples( position: Number ): int		{			return int( ( position * 10584000.0 ) / TEMPO + .5 );		}				private function _init(): void		{			_soundBuffer = new Vector.<Vector.<Number>>( 2, true );			_soundBuffer[0] = new Vector.<Number>( BUFFER_SIZE, true );			_soundBuffer[1] = new Vector.<Number>( BUFFER_SIZE, true );						_particles = new Vector.<ToneParticle>();			_particles[0] = _createToneParticle( x0, y0, 0 );			_particles[1] = _createToneParticle( x1, y1, 3 );			_particles[2] = _createToneParticle( x2, y2, 5 );			_particles[3] = _createToneParticle( x3, y3, 8 );			_particles[4] = _createToneParticle( x4, y4, 10 );						_wheels = new Vector.<ToneWheel>();						_wheels[0] = _createToneWheel( wx0, wy0, 64, 2, .5, 0 );			_wheels[1] = _createToneWheel( wx1, wy1, 64, 5, .25, 1 );			_wheels[2] = _createToneWheel( wx2, wy2, 64, 3, .25, 2 );			_position = 0.0;						_sound = new Sound();			_sound.addEventListener( SampleDataEvent.SAMPLE_DATA, _sampleData );			_delaySize = int( 44.1 * 400 ); // 400ms delay time			_delayLine = new Vector.<Vector.<Number>>( _delaySize, true );						for( var i: int = 0 ; i < _delaySize ; ++i )				_delayLine[i] = new Vector.<Number>( 2, true ); // STEREO DELAY LINE						_delayWriteIndex = 0;						setTimeout( _start, 500 );		}				private function _start(): void		{			var i: int;			var n: int = _wheels.length;						for( i = 0 ; i < n ; ++i )				sprite.addChild( _wheels[i] );						n = _particles.length;						for( i = 0 ; i < n ; ++i )				sprite.addChild( _particles[i] );						_lastBuffer = getTimer();						_soundChannel = _sound.play();					}				private function _createToneWheel( x: Number, y: Number, radius: Number, numSegments: uint, speed: Number, octave: uint ): ToneWheel		{			var wheel: ToneWheel = new ToneWheel( this, radius, numSegments, speed, octave );						wheel.x = x;			wheel.y = y;						return wheel;		}		private function _createToneParticle( x: Number, y: Number, note: uint ): ToneParticle		{			var particle: ToneParticle = new ToneParticle( note );						particle.x = x;			particle.y = y;						return particle;		}		private function _sampleData( event: SampleDataEvent ): void		{			if( _soundChannel != null )				_soundLatency = ( event.position * 2.267573696145e-02 ) - _soundChannel.position;			_clearBuffer();			var to: Number = _position + BUFFER_SIZE * ( TEMPO * 9.448223733938e-8 );						var i: int;			var n: int = _wheels.length;						for( i = 0 ; i < n ; ++i )				_wheels[i].processEvents( _position, to );						for( i = 0 ; i < n ; ++i )				_wheels[i].processAudio( _soundBuffer );						_lastBuffer = getTimer( );			const mix: Number = .2;			const feedback: Number = .7;						var sourceLeft: Number;			var sourceRight: Number;						var delayLeft: Number;			var delayRight: Number;			var l: Vector.<Number> = _soundBuffer[0];			var r: Vector.<Number> = _soundBuffer[1];						var readIndex: int;						for( i = 0 ; i < BUFFER_SIZE ; ++i )			{				sourceLeft = l[i];				sourceRight = r[i];								//-- COMPUTE READ POINT				readIndex = _delayWriteIndex - _delaySize + 1;				if( readIndex < 0 )					readIndex += _delaySize;								//-- READ FROM DELAY LINE				delayLeft = _delayLine[readIndex][0];				delayRight = _delayLine[readIndex][1];								//-- WRITE INTO DELAY LINE				_delayLine[ _delayWriteIndex ][0] = sourceLeft + delayRight * feedback;				_delayLine[ _delayWriteIndex ][1] = sourceRight + delayLeft * feedback;				//-- WRITE MIX BACK				event.data.writeFloat( sourceLeft + delayLeft * mix );				event.data.writeFloat( sourceRight + delayRight * mix );				//-- MOVE WRITE POINTER				if( ++_delayWriteIndex == _delaySize )					_delayWriteIndex = 0;			}			_position = to;		}				private function _clearBuffer(): void		{			var l: Vector.<Number> = _soundBuffer[0];			var r: Vector.<Number> = _soundBuffer[1];						for( var i: int = 0 ; i < BUFFER_SIZE ; ++i )			{				l[i] = 0.0;				r[i] = 0.0;			}		}		/**		 * 	Render graphics		 */		override public function render(info:RenderInfo):void 		{			var i: int;			var n: int = _wheels.length;						for( i = 0 ; i < n ; ++i )				_wheels[i].draw( _position + ( ( getTimer() - _lastBuffer ) - _soundLatency ) * TEMPO / 240000.0 );			info.render( sprite );		}		public function get x0():int		{			return _x0;		}		public function set x0(value:int):void		{			_x0 = value;			_particles[0].x = _x0;		}		public function get y0():int		{			return _y0;		}		public function set y0(value:int):void		{			_y0 = value;			_particles[0].y = _y0;		}		public function get x1():int		{			return _x1;		}		public function set x1(value:int):void		{			_x1 = value;			_particles[1].x = _x1;		}		public function get y1():int		{			return _y1;		}		public function set y1(value:int):void		{			_y1 = value;			_particles[1].y = _y1;		}		public function get x2():int		{			return _x2;		}		public function set x2(value:int):void		{			_x2 = value;			_particles[2].x = _x2;		}		public function get y2():int		{			return _y2;		}		public function set y2(value:int):void		{			_y2 = value;			_particles[2].y = _y2;		}		public function get x3():int		{			return _x3;		}		public function set x3(value:int):void		{			_x3 = value;			_particles[3].x = _x3;		}		public function get y3():int		{			return _y3;		}		public function set y3(value:int):void		{			_y3 = value;			_particles[3].y = _y3;		}		public function get x4():int		{			return _x4;		}		public function set x4(value:int):void		{			_x4 = value;			_particles[4].x = _x4;		}		public function get y4():int		{			return _y4;		}		public function set y4(value:int):void		{			_y4 = value;			_particles[4].y = _y4;		}				public function get wx0():int		{			return _wx0;		}				public function set wx0(value:int):void		{			_wx0 = value;			_wheels[0].x = _wx0;		}				public function get wy0():int		{			return _wy0;		}				public function set wy0(value:int):void		{			_wy0 = value;			_wheels[0].y = _wy0;		}				public function get wx1():int		{			return _wx1;		}				public function set wx1(value:int):void		{			_wx1 = value;			_wheels[1].x = _wx1;		}				public function get wy1():int		{			return _wy1;		}				public function set wy1(value:int):void		{			_wy1 = value;			_wheels[1].y = _wy1;		}				public function get wx2():int		{			return _wx2;		}				public function set wx2(value:int):void		{			_wx2 = value;			_wheels[2].x = _wx2;		}				public function get wy2():int		{			return _wy2;		}				public function set wy2(value:int):void		{			_wy2 = value;			_wheels[2].y = _wy2;		}	}}