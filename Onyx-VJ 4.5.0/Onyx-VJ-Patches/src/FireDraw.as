/**
 * Copyright o_healer ( http://wonderfl.net/user/o_healer )
 * MIT License ( http://www.opensource.org/licenses/mit-license.php )
 * Downloaded from: http://wonderfl.net/c/dzI0
 */

package 
{
	import flash.display.*;
	import flash.events.*;
	import flash.filters.*;
	import flash.geom.*;
	import flash.media.*;
	import flash.net.*;
	import flash.system.*;
	import flash.text.*;
	
	import onyx.core.*;
	import onyx.parameter.*;
	import onyx.plugin.*;
	
	public class FireDraw extends Patch 
	{
		static public const VIEW_RECT:Rectangle = new Rectangle(0,0,DISPLAY_WIDTH,DISPLAY_HEIGHT);
		static public const POS_ZERO:Point = new Point(0,0);

		//å??é??ã??è??ç?ºã??ä??ã??ã??ã??ã??ã??ã??ã??
		public var m_BitmapData_View:BitmapData = new BitmapData(DISPLAY_WIDTH, DISPLAY_HEIGHT, true, 0x00000000);
		//ç??ã??ç??æ??ã??0x00ï??0xFFã??ä??æ??ã??ã??ã??ã??ã??
		public var m_BitmapData_Fire:BitmapData = new BitmapData(DISPLAY_WIDTH, DISPLAY_HEIGHT, false, 0x00);
		//Fire => Viewã??å??æ??ã??ã??ã??ã??ã??ã??ã??ã??ï??0x00ï??0xFFã??å??ã??ã??å??é??ã??ç??ã??è??ã??ç??ã??æ??ã??ã??ï??
		public var m_Palette_Fire_to_View:Array = new Array(256);
		//æ??è??ã??ä??ã??ã??ã??ã??ã??ã??ã?ªã??ã??ã??ã?º
		public var m_BitmapData_PerlinNoise:BitmapData = new BitmapData(DISPLAY_WIDTH * 2, DISPLAY_HEIGHT * 2, false, 0x000000);
		//ã??ã??ã??ã??ã??ã??ä??ã??ã??ã??ã?ªã??ã??
		public var m_Mtx_PerlinNoise:Matrix = new Matrix();
		//åº?ã??ã??ã??ã??ã??ã??ã??ã??ã??ã??ã??ã??ã??
		public var m_Filter_FireBlur:BlurFilter = new BlurFilter(4,4);
		
		static public const LINE_W:uint = 16;
		public var mouseX_Old:int = 0;
		public var mouseY_Old:int = 0;
		public var fireShape:Shape = new Shape();
		public var fireShape_Fix:Shape = new Shape();
		
		public var m_BitmapData_BG:BitmapData = new BitmapData(DISPLAY_WIDTH, DISPLAY_HEIGHT, false, 0x000000);
		private var sprite:Sprite;
		private var mx:int = 320;
		private var my:int = 240;
		
		public function FireDraw()
		{
			var i:int;
			sprite = new Sprite();
	
			const PanelLen:int = 24;//ç??ç??ã??ã??ã??ã??ã??ã?ªå??ã??ã??ï??ã??ã??ã??çµµã??ä??ã??ã??ã??ã??ï??ã??ã??ï??32ã??ã??ã??ã??ã??ã??ã??æ??å??ï??
			const Octave:int = 2;//å??å??ã??é??ã??ã??ã??
			m_BitmapData_PerlinNoise.perlinNoise(PanelLen,PanelLen, Octave, 1000*Math.random(), true, true);
			//ã??ã??ã??ç??ã??ï??æ??ä??ã??ã??å??ã??ã??ã??ï??ã??ã??ã??ã??ã??ã??ã??ã??ã??ã??ã??ã?ªã??ç??ã??æ??ã??ã??ã?ªã??ï??
			m_BitmapData_PerlinNoise.copyPixels(m_BitmapData_PerlinNoise, new Rectangle(0,0,DISPLAY_WIDTH*2,DISPLAY_HEIGHT), new Point(0,DISPLAY_HEIGHT));
			//æ??è??ã??ä??ã??ã??ã??å??ã??æ??å??
			const ratio:Number = 0.09;//å??ã??ã??ã??ã??ã??ç??ã??ä??ã??ã??å??ã??ã??ã?ªã??
			m_BitmapData_PerlinNoise.colorTransform(
				m_BitmapData_PerlinNoise.rect,//VIEW_RECTã??ã??ç??å??ã??é??ã??ã??ã??ã??ç??ã??rectã??ä??ã??
				new ColorTransform(ratio,ratio,ratio)//å??ã??æ??è??ã??ã??ã??
			);

			for(i = 0; i < 256; i++)
			{
				var r:uint = 0xFF * (0.5 - 0.5*Math.cos(Math.PI * Math.pow(i/255, 1.0)));
				var g:uint = 0xFF * (0.5 - 0.5*Math.cos(Math.PI * Math.pow(i/255, 1.5)));
				var b:uint = 0xFF * (0.5 - 0.5*Math.cos(Math.PI * Math.pow(i/255, 3.0)));
				
				m_Palette_Fire_to_View[i] = (0xFF<<24)|(r<<16)|(g<<8)|(b<<0);
			}

		

			const Base_W:int = DISPLAY_WIDTH*2;//å??ã??ã??ã??ã??å??å??ã??ã??ã??ã??ã??ã??ã?ªã??
			const Base_H:int = DISPLAY_HEIGHT/4;//å??ã??ã??ã??ã??å??å??ã??ã??ã??ã??ã??ã??ã?ªã??
			const NumOctaves:int = 2;//ã??ã??ç??ã??ã??
			m_BitmapData_BG.perlinNoise(Base_W,Base_H, NumOctaves, 1000*Math.random(), true, true, BitmapDataChannel.RED);

			//äº?ã??ã??è??ã??å??æ??ç??ã??é??ç??ã??ã??ç??ã??ã??ã??ã??
			const SrcColor:uint = 0x281000;
			const DstColor:uint = 0x8B4513;
			
			//0x00ï??0xFFã??ä??å??å??ã??ã??è??ã??å??æ??ç??ã??é??ç??ã??ã??ã??
			const Cycle:int = 16;
			
			//Lerp
			const Lerp:Function = function(in_Src:Number, in_Dst:Number, in_Ratio:Number):Number{
				return (in_Src * (1 - in_Ratio)) + (in_Dst * in_Ratio);
			};
			const LerpColor:Function = function(in_Src:uint, in_Dst:uint, in_Ratio:Number):uint{
				var r:uint = Lerp((in_Src>>16)&0xFF, (in_Dst>>16)&0xFF, in_Ratio);
				var g:uint = Lerp((in_Src>>8)&0xFF,  (in_Dst>>8)&0xFF,  in_Ratio);
				var b:uint = Lerp((in_Src>>0)&0xFF,  (in_Dst>>0)&0xFF,  in_Ratio);
				return (0xFF<<24) | (r<<16) | (g<<8) | (b<<0);
			};
			
			//å??é??ã??ã??ã??ã??ã??è??ç??
			var ColorPalette:Array = new Array(256);
			for(i = 0; i < 256; i++)
			{
				var color_ratio:Number = i/255.0;
				color_ratio = 0.5 - 0.5*Math.cos(Cycle * Math.PI * color_ratio);//å??æ??ç??ã?ªRatioå??å??ã??ã??ã??
				color_ratio = 0.5 - 0.5*Math.cos(Math.PI * color_ratio);//0or1ã??å??ã??å??ã??ã??
				ColorPalette[i] = LerpColor(SrcColor, DstColor, color_ratio);
			}
			
			//é??ç??
			m_BitmapData_BG.paletteMap(m_BitmapData_BG, VIEW_RECT, POS_ZERO, ColorPalette);


			sprite.addChild(new Bitmap(m_BitmapData_BG));


			var bmp_view:Bitmap = new Bitmap(m_BitmapData_View);
			bmp_view.blendMode = BlendMode.ADD;//å??ç??è??ç??ã??ã??ã??ã??ã??ã??ã??ã??ã??ã??é??ï??é??æ??ã??ã??ã??æ??ã??ã??
			sprite.addChild(bmp_view);

			addEventListener( MouseEvent.MOUSE_MOVE, DrawEmit );
			addEventListener( MouseEvent.MOUSE_DOWN, onClick);
			addEventListener( MouseEvent.MOUSE_UP, onRelease);
		}
		private function DrawEmit(event:MouseEvent):void 
		{
			mx = event.localX; 
			my = event.localY; 	
			var g:Graphics = fireShape_Fix.graphics;
			
			g.lineStyle(LINE_W,0x0000FF,1.0);
			g.moveTo(mx, my);
			g.lineTo(mouseX_Old, mouseY_Old);	
			mouseX_Old = mx;
			mouseY_Old = my;
			
		}		
		private function onClick(event:MouseEvent):void 
		{
			mx = event.localX; 
			my = event.localY;
			mouseX_Old = mx;
			mouseY_Old = my;
		}		
		private function onRelease(event:MouseEvent):void 
		{
			mx = event.localX; 
			my = event.localY;
		}		
		override public function render(info:RenderInfo):void 
		{			
			Emit();

			DrawFire();
			info.render( sprite );		
		}
		
		
		//Emit
		public function Emit():void
		{
			var g:Graphics = fireShape.graphics;
			
			const RAD:uint = 8;

			m_BitmapData_Fire.draw(fireShape);
			m_BitmapData_Fire.draw(fireShape_Fix);
			fireShape.graphics.clear();

		}
		
		//DrawFire
		public function DrawFire():void
		{
			m_BitmapData_Fire.applyFilter(m_BitmapData_Fire, VIEW_RECT, POS_ZERO, m_Filter_FireBlur);
			m_BitmapData_Fire.draw(m_BitmapData_PerlinNoise, m_Mtx_PerlinNoise, null, BlendMode.SUBTRACT);
			m_BitmapData_View.paletteMap(m_BitmapData_Fire, VIEW_RECT, POS_ZERO, null,null,m_Palette_Fire_to_View);
			const ScrollVal:int = 2;
			
			m_BitmapData_Fire.scroll(0, -ScrollVal);
			m_Mtx_PerlinNoise.tx += (Math.random() < 0.5)? 1: -1;//æ??å??
			m_Mtx_PerlinNoise.ty -= ScrollVal;//è??é??
				
			if(m_Mtx_PerlinNoise.tx > 0){m_Mtx_PerlinNoise.tx -= 2;}//ç??å??å??ã??æ??ã??æ??ã??
			if(m_Mtx_PerlinNoise.tx < -DISPLAY_WIDTH){m_Mtx_PerlinNoise.tx += 2;}
			if(m_Mtx_PerlinNoise.ty < -DISPLAY_HEIGHT){m_Mtx_PerlinNoise.ty += DISPLAY_HEIGHT;}//ä??ã??ã??ã??ã??
			
		}
	}
}

