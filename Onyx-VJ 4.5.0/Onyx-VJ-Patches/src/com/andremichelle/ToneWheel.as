package com.andremichelle {	import flash.display.Sprite;	import library.patches.ToneWheelApplication;
	/**	 * @author aM	 */	public class ToneWheel extends Sprite	{		private var _application: ToneWheelApplication;		private var _radius: Number;				private var _numSegments: int;		private var _speed: Number;				private var _octave: uint;				private var _actives: Vector.<IToneGenerator>;				private var _dragButton: DragButton;		public function ToneWheel( application: ToneWheelApplication, radius: Number, numSegments: int, speed: Number, octave: uint )		{			_application = application;			_radius = radius;			_numSegments = numSegments;			_speed = speed;			_octave = octave;						_actives = new Vector.<IToneGenerator>();						_dragButton = new DragButton();			 addChild( _dragButton );		}		public function processEvents( from: Number, to: Number ): void		{			var particles: Vector.<ToneParticle> = _application.particles;						var p0: Number = ( _speed * from ) % 1.0;			var p1: Number = ( _speed * to ) % 1.0;			var particle: ToneParticle;						var rel: Number;			var abs: Number;						var step: Number = 1.0 / _numSegments;						var dx: Number;			var dy: Number;						var i: int = particles.length;			var j: int;						while( --i > -1 )			{				particle = particles[i];								dx = particle.x - x;				dy = particle.y - y;								if( dx * dx + dy * dy > _radius * _radius )					continue;				abs = 1.0 + ( Math.atan2( dy, dx ) + Math.PI * .5 ) / ( Math.PI * 2.0 );				j = _numSegments;				while( --j > -1 )				{					rel = j * step + abs;					rel = rel - int( rel );										if( p1 > p0 )					{						if( rel >= p0 && rel < p1 )							_playParticle( particle, rel - p0, dx / _radius );					}					else					{						if( rel >= p0 && rel < 1.0 )							_playParticle( particle, rel - p0, dx / _radius );						else						if( rel >= 0.0 && rel < p1 )							_playParticle( particle, 1.0 - p0 + rel, dx / _radius );					}				}			}		}				public function processAudio( buffer: Vector.<Vector.<Number>> ): void		{			var i: int = _actives.length;						while( --i > -1 )			{				if( _actives[i].processAudioAdd(buffer ) )					_actives.splice( i, 1 );			}		}		public function draw( position: Number ): void		{			position *= _speed * ( Math.PI * 2 );						graphics.clear();			graphics.lineStyle( 0, 0xC0C0CA );						var angle: Number;			var step: Number = ( Math.PI * 2 ) / _numSegments;						var sn: Number;			var cs: Number;						for( var i: int = 0 ; i < _numSegments ; ++i )			{				angle = i * step + position;								sn = Math.sin( angle );				cs = Math.cos( angle );								graphics.moveTo( sn * 8, cs * -8 );				graphics.lineTo( sn * _radius, cs * -_radius );			}		}				private function _playParticle( particle: ToneParticle, delta: Number, pan: Number ): void		{			_actives.push( particle.createToneGenerator( _application.positionToNumSamples( delta ), _octave, pan ) );		}	}}import flash.display.Sprite;class DragButton extends Sprite{	public function DragButton()	{		graphics.beginFill( 0x606060 );		graphics.drawCircle( 0, 0, 8 );		graphics.endFill();	}}