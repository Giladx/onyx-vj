/**
 * Copyright azk_azk ( http://wonderfl.net/user/azk_azk )
 * MIT License ( http://www.opensource.org/licenses/mit-license.php )
 * Downloaded from: http://wonderfl.net/c/dH1j
 */

// forked from tail_y's PuyoDot
package inprogress 
{
	
	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.display.GradientType;
	import flash.display.Graphics;
	import flash.display.Shape;
	import flash.display.Sprite;
	import flash.display.StageQuality;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.geom.Matrix;
	import flash.geom.Point;
	import flash.geom.Rectangle;
	
	public class PuyoDot extends Sprite
	{
		public static const STAGE_W:uint = 465;
		public static const STAGE_H:uint = 465;
		
		private static const _WALL_LEFT:Number = 0;
		private static const _WALL_RIGHT:Number = 465;
		private static const _GROUND_LINE:Number = 350;
		
		private static const _DOT_CONNECT_MAX:int = 4;
		private static const _DERIVATION:int = 3;    // è??ç??ã??å??å??æ??ã??
		private static const _MAP_SIZE:Number = 200;
		
		private static const _PI:Number = Math.PI;
		private static const _PI2:Number = 2.0 * _PI;
		private static const _RADIAN90:Number    = _PI * 0.5;
		private static const _RADIAN180:Number    = _PI * 1.0;
		private static const _RADIAN270:Number    = _PI * -0.5;
		private static const _TO_DEGREE:Number    = 180 / _PI;
		
		private static const _GRAVITY:Number = 0.2 / _DERIVATION;
		private static const _ROTATION_RATE:Number = 0.05 / _DERIVATION;    // è?ªèº?ãƒ?ãƒ?ï??æ??å?ƒï??
		private static const _VERTICAL_RATE:Number = 0.2 / _DERIVATION;    // ã??ãƒ?ã??ãƒƒãƒ?ãƒ?ãƒ?ï??ã??ã??ã??ã??ï??
		private static const _MOUSE_PULL_RATE:Number = 2.0 / _DERIVATION;
		
		private static const _FRICTION:Number = 0.1 / _DERIVATION;
		private static const _ROTATE_FRICTION:Number = 1 - 0.2 / _DERIVATION;
		private static const _MOUSE_ROTATE_FRICTION:Number = 1 - 0.8 / _DERIVATION;
		private static const _MOUSE_MOVE_FRICTION:Number = 1 - 0.5 / _DERIVATION;
		private static const _GROUND_FRICTION:Number = 1 - 0.2 / _DERIVATION;
		
		// ãƒ‘ãƒ¼ãƒ†ã‚£ã‚¯ãƒ«
		private var _dotMap:DotMap;
		private var _particleList:Array = [];    //:Array :Particle
		private var _particleDistance:int;
		private var _w:int;
		private var _h:int;
		
		// ãƒ‰ãƒ©ãƒƒã‚°
		private var _dragIdX:int = -1;
		private var _dragIdY:int = -1;
		
		// ãƒ¬ã‚¤ãƒ¤ãƒ¼
		private var _bgLayer:Bitmap;
		private var _displayLayer:Bitmap;
		private var _debugLayer:Sprite;
		private var _debugDisplayList:Array = [];
		private var _dragLayer:Sprite;
		private var _dragList:Array = [];
		
		// ãƒ“ãƒƒãƒˆãƒžãƒƒãƒ—
		private var _clearBitmap:BitmapData = new BitmapData(STAGE_W, STAGE_H, true, 0x00000000);
		private var _displayBitmap:BitmapData = new BitmapData(STAGE_W, STAGE_H);
		private var _bgBitmap:BitmapData = new BitmapData(STAGE_W, STAGE_H);
		private var _gradiationBitmap:BitmapData = new BitmapData(STAGE_W, STAGE_H);
		private var _reflectAlphaBitmap:BitmapData = new BitmapData(STAGE_W, STAGE_H, true, 0x00000000);
		
		private var _rect:Rectangle = new Rectangle(0, 0, STAGE_W, STAGE_H);
		private var _point:Point = new Point();
		private var _refrectPoint:Point = new Point(0, -2*_GROUND_LINE + STAGE_H);
		
		public function PuyoDot()
		{
			var bg:Sprite = new Sprite();    // wonderflã§ã¯ã‚­ãƒ£ãƒ—ãƒãƒ£ã«èƒŒæ™¯è‰²ãŒåæ˜ ã•ã‚Œãªã„ã®ã§ã€èƒŒæ™¯è‰²Spriteã§è¦†ã†ã€‚
			bg.graphics.beginFill(0xffffff);
			bg.graphics.drawRect(0, 0, STAGE_W, STAGE_H);
			addChild(bg);
			
			var dotMapList:Array = [
				new MapMarioStand()//,
				/*new MapMarioJump(),
				new MapSlime(),
				new MapPackmanMonster(),
				new MapSpelunker(),
				new Map1Up(),
				new MapSakuma(),*/
			]    // ã“ã“ã‚’ä¸€ã¤ã ã‘ã«ã™ã‚Œã°ã€ä»»æ„ã®ãƒ‰ãƒƒãƒˆçµµãŒè¡¨ç¤ºã§ãã‚‹
			//_dotMap = dotMapList[Math.floor(Math.random()*dotMapList.length)];    // ã“ã“ã§ã€ãƒ‘ãƒ¬ãƒƒãƒˆãƒžãƒƒãƒ—ã‚’æ±ºã‚ã‚‹
			_dotMap = dotMapList[0];    // ã“ã“ã§ã€ãƒ‘ãƒ¬ãƒƒãƒˆãƒžãƒƒãƒ—ã‚’æ±ºã‚ã‚‹
			
			
			addChild(_bgLayer = new Bitmap(_bgBitmap));
			addChild(_displayLayer = new Bitmap(_displayBitmap));
			addChild(_debugLayer = new Sprite());
			addChild(_dragLayer = new Sprite());
			_debugLayer.visible = false;
			_bgLayer.scaleY = -1;
			_bgLayer.y = STAGE_H;
			
			
			
			_w = _dotMap.w+1;
			_h = _dotMap.h+1;
			_particleDistance = _MAP_SIZE / _w;
			var tmpBaceX:Number = (STAGE_W - _MAP_SIZE) / 2;
			var tmpBaceY:Number = 20;
			var x:int, y:int;
			var particle:Particle;
			// ç”Ÿæˆ
			for (x = 0; x < _w; x++){
				_particleList[x] = [];
				_dragList[x] = [];
				for (y = 0; y < _h; y++){
					
					particle = new Particle();
					var tmpNearDotList:Array = [_dotMap.isDot(x, y), _dotMap.isDot(x-1, y), 
						_dotMap.isDot(x-1, y-1), _dotMap.isDot(x, y-1)];
					particle.connect[0] = (tmpNearDotList[0] || tmpNearDotList[3]) && x < _w-1;    // å³
					particle.connect[1] = (tmpNearDotList[1] || tmpNearDotList[0]) && y < _h-1;    // ä¸‹
					particle.connect[2] = (tmpNearDotList[2] || tmpNearDotList[1]) && 0 < x;    // å·¦
					particle.connect[3] = (tmpNearDotList[3] || tmpNearDotList[2]) && 0 < y;    // ä¸Š
					
					
					if (!particle.connect[0] && !particle.connect[1] && !particle.connect[2] && !particle.connect[3]){
						_particleList[x][y] = null;
						continue;
					}
					particle.color = _dotMap.getColor(x, y);
					particle.x = tmpBaceX + _particleDistance * x + Math.random()*3;
					particle.y = tmpBaceY + _particleDistance * y;
					_particleList[x][y] = particle;
					createDragSprite(x, y);
					
				}
			}
			for (x = 0; x < _w; x++){
				for (y = 0; y < _h; y++){
					particle = _particleList[x][y];
					if (particle == null) continue;
					particle.connect[4] = particle.connect[0] && Particle(_particleList[x+1][y]).connect[0];    // å³å³
					particle.connect[5] = particle.connect[1] && Particle(_particleList[x][y+1]).connect[1];    // ä¸‹ä¸‹
					particle.connect[6] = particle.connect[2] && Particle(_particleList[x-1][y]).connect[2];    // å·¦å·¦
					particle.connect[7] = particle.connect[3] && Particle(_particleList[x][y-1]).connect[3];    // ä¸Šä¸Š
				}
			}
			
			// ãƒ‡ãƒãƒƒã‚°è¡¨ç¤º
			debugInit();
			
			displayInit();
			
			// ãƒ•ãƒ¬ãƒ¼ãƒ ã®å‡¦ç†ã‚’ç™»éŒ²
			addEventListener(Event.ENTER_FRAME, frame);
			// ãƒžã‚¦ã‚¹ãƒ‰ãƒ©ãƒƒã‚°
			addEventListener(MouseEvent.MOUSE_UP, mouseUpEvent());
			
			//addChild(new Stats());
		}
		private function createDragSprite(x:int, y:int):void{    // ãƒ‰ãƒ©ãƒƒã‚°åˆ¤å®šã‚’ä½œã‚‹
			var sprite:Sprite = new Sprite();
			_dragLayer.addChild(sprite);
			_dragList[x][y] = sprite;
			var g:Graphics = sprite.graphics;
			g.beginFill(0x000000, 0);
			g.drawCircle(0, 0, _particleDistance*0.8);
			// ãƒžã‚¦ã‚¹ã‚¤ãƒ™ãƒ³ãƒˆ
			sprite.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownEvent(x, y));
		}
		
		
		// ãƒ•ãƒ¬ãƒ¼ãƒ æŒ™å‹•
		private function frame(event:Event):void{
			for (var i:int=0; i<_DERIVATION; i++){
				rotate();    // å›žè»¢ã®è¨ˆç®—
				force();    // åŠ›ã®è¨ˆç®—
				move();    // ç§»å‹•å‡¦ç†
			}
			draw();    // æç”»å‡¦ç†
			debugDraw();
		}
		
		
		
		// ãƒœãƒ¼ãƒ³ã®å‘ãã‚’æ±ºå®šã™ã‚‹
		private function rotate():void{
			var x:int, y:int;
			for (x = 0; x < _w; x++){
				for (y = 0; y < _h; y++){
					var particle:Particle = _particleList[x][y];
					if (particle == null) continue;
					var subParticle:Particle;
					if (particle.connect[0]){    // å³ãƒ‘ãƒ¼ãƒ†ã‚£ã‚¯ãƒ«ã«å¯¾ã™ã‚‹å‡¦ç†
						subParticle = _particleList[x+1][y];
						calcConnectRForce(particle, subParticle, 0);
						calcConnectRForce(subParticle, particle, _RADIAN180);
					}
					if (particle.connect[1]){    // ä¸‹ãƒ‘ãƒ¼ãƒ†ã‚£ã‚¯ãƒ«ã«å¯¾ã™ã‚‹å‡¦ç†
						subParticle = _particleList[x][y+1];
						calcConnectRForce(particle, subParticle, _RADIAN90);
						calcConnectRForce(subParticle, particle, _RADIAN270);
					}
					if (particle.connect[4]){    // å³å³ãƒ‘ãƒ¼ãƒ†ã‚£ã‚¯ãƒ«ã«å¯¾ã™ã‚‹å‡¦ç†
						subParticle = _particleList[x+2][y];
						calcConnectRForce(particle, subParticle, 0);
						calcConnectRForce(subParticle, particle, _RADIAN180);
					}
					if (particle.connect[5]){    // ä¸‹ä¸‹ãƒ‘ãƒ¼ãƒ†ã‚£ã‚¯ãƒ«ã«å¯¾ã™ã‚‹å‡¦ç†
						subParticle = _particleList[x][y+2];
						calcConnectRForce(particle, subParticle, _RADIAN90);
						calcConnectRForce(subParticle, particle, _RADIAN270);
					}
					if (x == _dragIdX && y == _dragIdY) particle.vr *= _MOUSE_ROTATE_FRICTION;
					else particle.vr *= _ROTATE_FRICTION;    // æ‘©æ“¦
					
					particle.radian += particle.vr;
				}
			}
		}
		// æŽ¥ç¶šã•ã‚ŒãŸãƒ‘ãƒ¼ãƒ„ã®å›žè»¢æ–¹å‘ã‚’è¨ˆç®—ã™ã‚‹
		private function calcConnectRForce(particle:Particle, targetParticle:Particle, connectAngle:Number):void{
			var angle:Number = Math.atan2(targetParticle.y - particle.y, targetParticle.x - particle.x);
			particle.vr += ajustRadian(angle - (connectAngle + particle.radian)) * _ROTATION_RATE;
		}
		
		
		
		private function force():void{
			var x:int, y:int;
			for (x = 0; x < _w; x++){
				for (y = 0; y < _h; y++){
					var particle:Particle = _particleList[x][y];
					if (particle == null) continue;
					var subParticle:Particle;
					if (particle.connect[0]){    // å³ãƒ‘ãƒ¼ãƒ†ã‚£ã‚¯ãƒ«ã«å¯¾ã™ã‚‹å‡¦ç†
						subParticle = _particleList[x+1][y];
						calcConnectFoce(particle, subParticle, 0, _particleDistance);
						calcConnectFoce(subParticle, particle, _RADIAN180, _particleDistance);
					}
					if (particle.connect[1]){    // ä¸‹ãƒ‘ãƒ¼ãƒ†ã‚£ã‚¯ãƒ«ã«å¯¾ã™ã‚‹å‡¦ç†
						subParticle = _particleList[x][y+1];
						calcConnectFoce(particle, subParticle, _RADIAN90, _particleDistance);
						calcConnectFoce(subParticle, particle, _RADIAN270, _particleDistance);
					}
					if (particle.connect[4]){    // å³å³ãƒ‘ãƒ¼ãƒ†ã‚£ã‚¯ãƒ«ã«å¯¾ã™ã‚‹å‡¦ç†
						subParticle = _particleList[x+2][y];
						calcConnectFoce(particle, subParticle, 0, _particleDistance*2);
						calcConnectFoce(subParticle, particle, _RADIAN180, _particleDistance*2);
					}
					if (particle.connect[5]){    // ä¸‹ä¸‹ãƒ‘ãƒ¼ãƒ†ã‚£ã‚¯ãƒ«ã«å¯¾ã™ã‚‹å‡¦ç†
						subParticle = _particleList[x][y+2];
						calcConnectFoce(particle, subParticle, _RADIAN90, _particleDistance*2);
						calcConnectFoce(subParticle, particle, _RADIAN270, _particleDistance*2);
					}
					particle.ay += _GRAVITY;
					if (_dragIdX == x && _dragIdY == y){    // ãƒžã‚¦ã‚¹ã§å¼•ã£å¼µã‚‹
						var point:Point = pullForce(particle.x, particle.y, mouseX, mouseY, _MOUSE_PULL_RATE);
						particle.ax += point.x;
						particle.ay += point.y;
						particle.vx *= _MOUSE_MOVE_FRICTION;
						particle.vy *= _MOUSE_MOVE_FRICTION;
					}
				}
			}
		}
		// æŽ¥ç¶šã•ã‚ŒãŸï¼’ãƒ‘ãƒ¼ãƒ„ã®åŠ›ã‚’è¨ˆç®—ã™ã‚‹
		private function calcConnectFoce(particle:Particle, targetParticle:Particle, connectAngle:Number, distance:Number):void{
			var toAngle:Number = ajustRadian(connectAngle + particle.radian);
			var toX:Number = particle.x + Math.cos(toAngle) * distance;
			var toY:Number = particle.y + Math.sin(toAngle) * distance;
			var ax:Number = (targetParticle.x - toX) * _VERTICAL_RATE;
			var ay:Number = (targetParticle.y - toY) * _VERTICAL_RATE;
			particle.ax += ax;
			particle.ay += ay;
			targetParticle.ax -= ax;
			targetParticle.ay -= ay;
		}
		// ãƒã‚¤ãƒ³ãƒˆx1 y1ã‚’ã€ãƒã‚¤ãƒ³ãƒˆx2 y2ã¸ã€ä¿‚æ•°rateã ã‘ç§»å‹•ã•ã›ã‚‹å ´åˆã®ã€XYã®åŠ›ã‚’è¿”ã™
		private function pullForce(x1:Number, y1:Number, x2:Number, y2:Number, rate:Number):Point{
			var point:Point = new Point();
			var distance:Number = calcDistance(x1, y1, x2, y2);
			
			var angle:Number = Math.atan2(y2 - y1, x2 - x1);
			point.x = Math.cos(angle) * distance * rate;
			point.y = Math.sin(angle) * distance * rate;
			return point;
		}
		// ãƒã‚¤ãƒ³ãƒˆx1 y1ã‹ã‚‰ã€ãƒã‚¤ãƒ³ãƒˆx2 y2ã¾ã§ã®è·é›¢
		private function calcDistance(x1:Number, y1:Number, x2:Number, y2:Number):Number{
			return Math.sqrt(Math.pow(x2-x1, 2) + Math.pow(y2-y1, 2));
		}
		// radianè§’åº¦ã‚’ã€-Ï€ï½žÏ€ã®ç¯„å›²ã«ä¿®æ­£ã™ã‚‹
		private function ajustRadian(radian:Number):Number{
			return radian - _PI2 * Math.floor( 0.5 + radian / _PI2);
		}
		
		private function move():void{
			var x:int, y:int;
			for (x = 0; x < _w; x++){
				for (y = 0; y < _h; y++){
					var particle:Particle = _particleList[x][y];
					if (particle == null) continue;
					
					// ç©ºæ°—æŠµæŠ— TODO:é€Ÿåº¦ã«å¯¾ã—ã¦ã®å‡¦ç†ã§è‰¯ã„ã¯ãšã€‚
					particle.ax += -_FRICTION * particle.vx;
					particle.ay += -_FRICTION * particle.vy;
					
					// é€Ÿåº¦ã€ä½ç½®ã¸ã®åæ˜ 
					particle.vx += particle.ax;
					particle.vy += particle.ay;
					particle.x += particle.vx;
					particle.y += particle.vy;
					particle.ax = 0;
					particle.ay = 0;    // åŠ›ã‚’ã‚¯ãƒªã‚¢
					
					// å£ãƒã‚§ãƒƒã‚¯
					if (0 < particle.vy && _GROUND_LINE < particle.y){
						particle.y = _GROUND_LINE;
						particle.vy *= -0.8;
						if (particle.vy < -50) particle.vy = -50;
						particle.vx *= _GROUND_FRICTION;
					}
					if (particle.vx < 0 && particle.x < _WALL_LEFT){
						particle.x = _WALL_LEFT;
						particle.vx = 0;
						particle.vy *= _GROUND_FRICTION;
					}else if (0 < particle.vx && _WALL_RIGHT < particle.x){
						particle.x = _WALL_RIGHT;
						particle.vx = 0;
						particle.vy *= _GROUND_FRICTION;
					}
					
					// ãƒ‰ãƒ©ãƒƒã‚°ã‚¨ãƒªã‚¢ã‚’ç§»å‹•
					var sprite:Sprite = _dragList[x][y];
					sprite.x = particle.x;
					sprite.y = particle.y;
				}
			}
		}
		
		private var _drawShape:Shape = new Shape();
		
		private function displayInit():void{
			var g:Graphics = _drawShape.graphics;
			g.clear();
			var matrix:Matrix = new Matrix();
			matrix.createGradientBox(STAGE_W, STAGE_H, Math.PI / 2, 0, 0);
			g.beginGradientFill(GradientType.LINEAR, [0xf8f8f8, 0xe8e8e8], [1, 1], [0, 255], matrix);
			g.drawRect(0, 0, STAGE_W, STAGE_H);
			_gradiationBitmap.draw(_drawShape);
			
			g.clear();
			g.beginGradientFill(GradientType.LINEAR, [0x000000, 0x000000], [0, 0.3], [125, 230], matrix);
			g.drawRect(0, 0, STAGE_W, STAGE_H);
			_reflectAlphaBitmap.draw(_drawShape);
		}
		private function draw():void{
			var g:Graphics = _drawShape.graphics;
			var particle:Particle;
			g.clear();
			var x:int, y:int;
			for (y = 0; y < _h-1; y++){
				for (x = 0; x < _w-1; x++){
					if(!_dotMap.isDot(x, y)) continue;    // ãƒ‰ãƒƒãƒˆãŒç„¡ã„ãªã‚‰æç”»çœç•¥
					g.beginFill(_dotMap.getColor(x, y));
					particle = _particleList[x][y];
					g.moveTo(particle.x, particle.y);
					particle = _particleList[x+1][y];
					g.lineTo(particle.x, particle.y);
					particle = _particleList[x+1][y+1];
					g.lineTo(particle.x, particle.y);
					particle = _particleList[x][y+1];
					g.lineTo(particle.x, particle.y);
					g.endFill();
				}
			}
			
			_displayBitmap.copyPixels(_clearBitmap, _rect, _point);
			_displayBitmap.draw(_drawShape);
			
			
			_bgBitmap.copyPixels(_gradiationBitmap, _rect, _point);
			_bgBitmap.copyPixels(_displayBitmap, _rect, _refrectPoint, _reflectAlphaBitmap, _point, true);
		}
		
		
		// ãƒžã‚¦ã‚¹ã‚¤ãƒ™ãƒ³ãƒˆ
		private function mouseDownEvent(x:int, y:int):Function{
			return function (event:Event):void{    startBornDrag(x, y);};
		}
		private function mouseUpEvent():Function{
			return function (event:Event):void{    endBornDrag();};
		}
		
		// ãƒ‰ãƒ©ãƒƒã‚°
		private function startBornDrag(x:int, y:int):void{
			_dragIdX = x;
			_dragIdY = y;
		}
		private function endBornDrag():void{
			_dragIdX = -1;
			_dragIdY = -1;
		}
		
		private function debugInit():void{
			var x:int, y:int;
			for (x = 0; x < _w; x++){
				_debugDisplayList[x] = [];
				for (y = 0; y < _h; y++){
					var sprite:Sprite = new Sprite();
					var g:Graphics = sprite.graphics;
					var radius:Number = 5;
					g.lineStyle(0, 0xff0000, 1);
					g.beginFill(0xff0000, 0.3);
					g.drawCircle(0, 0, radius);
					g.endFill();
					g.moveTo(0, 0);
					g.lineTo(radius*2, 0);
					_debugDisplayList[x][y] = sprite;
					_debugLayer.addChild(sprite);
				}
			}
		}
		
		private function debugDraw():void{
			var x:int, y:int;
			for (x = 0; x < _w; x++){
				for (y = 0; y < _h; y++){
					var particle:Particle = _particleList[x][y];
					if (particle == null) continue;
					var sprite:Sprite = _debugDisplayList[x][y];
					sprite.x = particle.x;
					sprite.y = particle.y;
					sprite.rotation = particle.radian * _TO_DEGREE;
				}
			}
		}
	}
}

class Particle
{
	public var x:Number = 0;    // ä½ç½®
	public var y:Number = 0;
	public var vx:Number = 0;    // é€Ÿåº¦
	public var vy:Number = 0;
	public var ax:Number = 0;    // åŠ é€Ÿåº¦=åŠ›    TOTO:æœ€å¾Œã¾ã§æ„å‘³ç„¡ã‹ã£ãŸã‚‰æ¶ˆã™
	public var ay:Number = 0;
	
	public var radian:Number = 0;    // å‘ã
	public var vr:Number = 0;    // å‘ãé€Ÿåº¦
	
	public var color:uint = 0x000000;    // ãƒ‘ãƒ¼ãƒ†ã‚£ã‚¯ãƒ«ã®è‰²ã€‚å³ä¸‹ã®æž ã®è‰²
	public var connect:Array = [true, true, true, true];    // ãƒ‘ãƒ¼ãƒ†ã‚£ã‚¯ãƒ«ã®æŽ¥ç¶šçŠ¶æ…‹ã‚’æ¯Žå›žãƒã‚§ãƒƒã‚¯ã—ãªãã¦ã„ã„ã‚ˆã†ã«ã€ä¿æŒã—ã¦ãŠã
}
class DotMap    // ãƒ‰ãƒƒãƒˆã®ã‚«ãƒ©ãƒ¼æƒ…å ±å…ƒ
{
	public var w:uint = 16;
	public var h:uint = 16;
	
	public var pallet:Array = [];    // ã‚«ãƒ©ãƒ¼ãƒ‘ãƒ¬ãƒƒãƒˆã€‚ã‚¼ãƒ­ç•ªã¯é€éŽè‰²äºˆå®š:uint
	public var strPallet:Array = [];    // :String
	public var strMap:String = "";
	public var map:Array = [];    // ãƒ”ã‚¯ã‚»ãƒ«ãƒžãƒƒãƒ—:int
	
	function DotMap(){
		init();
		readMap();
	}
	protected function init():void{
		w = 16;    // 16ãã‚‰ã„ãŒå¦¥å½“ã€‚ã‚ã‚“ã¾ã‚Šå¤šã™ãŽã‚‹ã¨è‡ªé‡ã§æ½°ã‚Œã‚‹ã—ã€é‡ã„
		h = 16;
		pallet = [0x000000, 0xDC2900, 0xFFA53B, 0x8B7300];    // ä¸€å¿œä½•è‰²ã§ã‚‚å¯èƒ½
		strPallet = ["ï¼¿", "â—‹", "â–¡", "â– "];
		
		strMap =
			"â– â– â– â– â–?â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??";
		
	}
	private function readMap():void{
		for (var i:int; i<w*h; i++){
			map.push(strPallet.indexOf(strMap.substr(i, 1)));
		}
	}
	
	public function isDot(x:int, y:int):Boolean{
		if (x < 0 || y < 0 || w <= x || h <= y) return false;
		if (map[x + y*w] == 0) return false;
		return true;
	}
	public function getColor(x:int, y:int):uint{
		if (x < 0 || y < 0 || w <= x || h <= y) return 0;
		return pallet[map[x + y*w]];
	}
}
/*class TestMap extends DotMap
{
	override protected function init():void{
		w = 16;
		h = 16;
		pallet = [0x000000, 0xffffff, 0x000000];
		strPallet = ["ï??", "â??", "â??"];
		strMap =
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"";
	}
}*/
class MapMarioStand extends DotMap
{
	override protected function init():void{
		w = 16;
		h = 16;
		pallet = [0x000000, 0xee2900, 0xFFA500, 0x875200];
		strPallet = ["ï??", "â??", "â??", "â??"];
		strMap =
			"ï??ï??ï??ï??ï??ï??â??â??â??â??â??ï??ï??ï??ï??ï??"+
			"ï??ï??ï??ï??ï??â??â??â??â??â??â??â??â??â??ï??ï??"+
			"ï??ï??ï??ï??ï??â??â??â??â??â??â??â??ï??ï??ï??ï??"+
			"ï??ï??ï??ï??â??â??â??â??â??â??â??â??â??â??ï??ï??"+
			"ï??ï??ï??ï??â??â??â??â??â??â??â??â??â??â??â??ï??"+
			"ï??ï??ï??ï??â??â??â??â??â??â??â??â??â??â??â??ï??"+
			"ï??ï??ï??ï??ï??ï??â??â??â??â??â??â??â??ï??ï??ï??"+
			"ï??ï??ï??ï??ï??â??â??â??â??â??â??ï??ï??ï??ï??ï??"+
			"ï??ï??ï??ï??â??â??â??â??â??â??â??â??â??â??ï??ï??"+
			"ï??ï??ï??â??â??â??â??â??â??â??â??â??â??â??â??ï??"+
			"ï??ï??ï??â??â??â??â??â??â??â??â??â??â??â??â??ï??"+
			"ï??ï??ï??â??â??â??â??â??â??â??â??â??â??â??â??ï??"+
			"ï??ï??ï??â??â??â??â??â??â??â??â??â??â??â??â??ï??"+
			"ï??ï??ï??ï??ï??â??â??â??ï??ï??â??â??â??ï??ï??ï??"+
			"ï??ï??ï??ï??â??â??â??ï??ï??ï??ï??â??â??â??ï??ï??"+
			"ï??ï??ï??â??â??â??â??ï??ï??ï??ï??â??â??â??â??ï??"+
			"";
	}
}
/*class MapMarioJump extends DotMap
{
	override protected function init():void{
		w = 16;
		h = 16;
		pallet = [0x000000, 0xee2900, 0xFFA500, 0x875200];
		strPallet = ["ï??", "â??", "â??", "â??"];
		strMap =
			"ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??â??â??â??"+
			"ï??ï??ï??ï??ï??ï??â??â??â??â??â??ï??ï??â??â??â??"+
			"ï??ï??ï??ï??ï??â??â??â??â??â??â??â??â??â??â??â??"+
			"ï??ï??ï??ï??ï??â??â??â??â??â??â??â??â??â??â??â??"+
			"ï??ï??ï??ï??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"ï??ï??ï??ï??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"ï??ï??ï??ï??â??â??â??â??â??â??â??â??â??â??â??ï??"+
			"ï??ï??ï??ï??ï??ï??â??â??â??â??â??â??â??ï??ï??ï??"+
			"ï??ï??â??â??â??â??â??â??â??â??â??â??â??ï??ï??ï??"+
			"ï??â??â??â??â??â??â??â??â??â??â??â??â??ï??ï??â??"+
			"â??â??â??â??â??â??â??â??â??â??â??â??â??ï??ï??â??"+
			"â??â??â??ï??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"ï??â??ï??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"ï??ï??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"ï??â??â??â??â??â??â??â??â??â??â??ï??ï??ï??ï??ï??"+
			"ï??â??ï??ï??â??â??â??â??ï??ï??ï??ï??ï??ï??ï??ï??"+
			"";
	}
}
class MapSlime extends DotMap
{
	override protected function init():void{
		w = 16;
		h = 16;
		pallet = [0x000000, 0x3399FF, 0xffffff, 0xff3333];
		strPallet = ["ï??", "â??", "Ã?", "â??"];
		strMap =
			"ï??ï??ï??ï??ï??ï??ï??ï??â??ï??ï??ï??ï??ï??ï??ï??"+
			"ï??ï??ï??ï??ï??ï??ï??ï??â??ï??ï??ï??ï??ï??ï??ï??"+
			"ï??ï??ï??ï??ï??ï??ï??ï??â??ï??ï??ï??ï??ï??ï??ï??"+
			"ï??ï??ï??ï??ï??ï??ï??ï??â??ï??ï??ï??ï??ï??ï??ï??"+
			"ï??ï??ï??ï??ï??ï??ï??â??â??â??ï??ï??ï??ï??ï??ï??"+
			"ï??ï??ï??ï??ï??ï??â??â??â??â??â??ï??ï??ï??ï??ï??"+
			"ï??ï??ï??ï??â??â??â??â??â??â??â??â??â??ï??ï??ï??"+
			"ï??ï??ï??Ã?Ã?â??â??â??â??â??â??â??â??â??ï??ï??"+
			"ï??ï??Ã?Ã?â??â??â??â??â??â??â??â??â??â??â??ï??"+
			"ï??â??Ã?â??â??â??Ã?â??â??â??Ã?â??â??â??â??â??"+
			"ï??â??â??â??â??Ã?â??Ã?â??Ã?â??Ã?â??â??â??â??"+
			"ï??â??â??â??â??Ã?â??Ã?â??Ã?â??Ã?â??â??â??â??"+
			"ï??â??â??â??â??â??Ã?â??â??â??Ã?â??â??â??â??â??"+
			"ï??â??â??â??â??â??â??â??â??â??â??â??â??â??â??â??"+
			"ï??ï??â??â??â??â??â??â??â??â??â??â??â??â??â??ï??"+
			"ï??ï??ï??ï??â??â??â??â??â??â??â??â??â??ï??ï??ï??"+
			"";
	}
}
class MapPackmanMonster extends DotMap
{
	override protected function init():void{
		w = 16;
		h = 16;
		pallet = [0x000000, 0xffffff, 0xff0000, 0x0000ff];
		strPallet = ["ï??", "Ã?", "â??", "â??"];
		strMap =
			"ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??"+
			"ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??ï??"+
			"ï??ï??ï??ï??ï??ï??â??â??â??â??ï??ï??ï??ï??ï??ï??"+
			"ï??ï??ï??ï??â??â??â??â??â??â??â??â??ï??ï??ï??ï??"+
			"ï??ï??ï??â??â??â??â??â??â??â??â??â??â??ï??ï??ï??"+
			"ï??ï??â??Ã?Ã?â??â??â??â??Ã?Ã?â??â??â??ï??ï??"+
			"ï??ï??Ã?Ã?Ã?Ã?â??â??Ã?Ã?Ã?Ã?â??â??ï??ï??"+
			"ï??ï??â??â??Ã?Ã?â??â??â??â??Ã?Ã?â??â??ï??ï??"+
			"ï??â??â??â??Ã?Ã?â??â??â??â??Ã?Ã?â??â??â??ï??"+
			"ï??â??â??Ã?Ã?â??â??â??â??Ã?Ã?â??â??â??â??ï??"+
			"ï??â??â??â??â??â??â??â??â??â??â??â??â??â??â??ï??"+
			"ï??â??â??â??â??â??â??â??â??â??â??â??â??â??â??ï??"+
			"ï??â??â??â??â??â??â??â??â??â??â??â??â??â??â??ï??"+
			"ï??â??â??â??â??â??â??â??â??â??â??â??â??â??â??ï??"+
			"ï??â??â??â??â??ï??â??â??â??â??ï??â??â??â??â??ï??"+
			"ï??ï??â??â??ï??ï??ï??â??â??ï??ï??ï??â??â??ï??ï??"+
			"";
	}
}
class MapSpelunker extends DotMap
{
	override protected function init():void{
		w = 16;
		h = 16;
		pallet = [0x000000, 0xFF8855, 0x0000ff, 0xff0000];
		strPallet = ["ï??", "Ã?", "â??", "â??"];
		strMap =
			"ï??ï??â??â??â??â??â??ï??ï??ï??ï??ï??ï??ï??ï??ï??"+
			"ï??â??â??â??â??â??â??â??ï??ï??ï??ï??ï??ï??â??ï??"+
			"â??â??â??â??â??â??â??â??â??ï??ï??ï??â??ï??ï??ï??"+
			"ï??â??â??â??â??Ã?â??Ã?ï??ï??ï??ï??ï??ï??ï??ï??"+
			"ï??â??â??â??Ã?Ã?Ã?Ã?Ã?ï??ï??ï??ï??â??ï??â??"+
			"ï??ï??â??â??â??Ã?Ã?Ã?ï??ï??ï??ï??ï??ï??ï??ï??"+
			"ï??ï??â??â??â??Ã?Ã?ï??â??â??â??â??â??â??â??ï??"+
			"ï??â??Ã?Ã?â??â??â??ï??ï??Ã?Ã?â??ï??ï??ï??ï??"+
			"ï??Ã?Ã?â??â??â??â??â??â??Ã?Ã?â??ï??ï??ï??â??"+
			"ï??Ã?Ã?â??â??â??â??â??â??ï??â??ï??ï??â??ï??ï??"+
			"ï??ï??Ã?â??â??â??â??â??ï??ï??ï??ï??ï??ï??â??ï??"+
			"ï??ï??ï??ï??â??â??â??â??â??ï??ï??ï??ï??ï??ï??ï??"+
			"ï??ï??ï??â??â??â??ï??â??â??â??ï??ï??ï??ï??ï??ï??"+
			"ï??ï??â??â??â??â??â??â??â??ï??ï??ï??ï??ï??ï??ï??"+
			"ï??ï??â??â??â??ï??â??â??â??ï??ï??ï??ï??ï??ï??ï??"+
			"ï??ï??ï??â??â??ï??â??â??â??â??ï??ï??ï??ï??ï??ï??"+
			"";
	}
}
class Map1Up extends DotMap
{
	override protected function init():void{
		w = 16;
		h = 16;
		pallet = [0x000000, 0x00cc33, 0xffffff, 0x000000];
		strPallet = ["ï??", "Ã?", "â??", "â??"];
		strMap =
			"ï??ï??ï??ï??ï??â??â??â??â??â??â??ï??ï??ï??ï??ï??"+
			"ï??ï??ï??â??â??â??â??Ã?Ã?Ã?Ã?â??â??ï??ï??ï??"+
			"ï??ï??â??â??â??â??â??Ã?Ã?Ã?Ã?â??â??â??ï??ï??"+
			"ï??â??â??â??â??â??Ã?Ã?Ã?Ã?Ã?Ã?â??â??â??ï??"+
			"ï??â??â??â??â??Ã?Ã?â??â??â??â??Ã?Ã?â??â??ï??"+
			"â??Ã?Ã?Ã?Ã?Ã?â??â??â??â??â??â??Ã?Ã?Ã?â??"+
			"â??Ã?â??â??Ã?Ã?â??â??â??â??â??â??Ã?Ã?Ã?â??"+
			"â??â??â??â??â??Ã?â??â??â??â??â??â??Ã?Ã?â??â??"+
			"â??â??â??â??â??Ã?Ã?â??â??â??â??Ã?Ã?â??â??â??"+
			"â??Ã?â??â??Ã?Ã?Ã?Ã?Ã?Ã?Ã?Ã?Ã?â??â??â??"+
			"â??Ã?Ã?Ã?â??â??â??â??â??â??â??â??Ã?Ã?â??â??"+
			"ï??â??â??â??â??â??â??â??â??â??â??â??â??â??â??ï??"+
			"ï??ï??â??â??â??â??â??â??â??â??â??â??â??â??ï??ï??"+
			"ï??ï??â??â??â??â??â??â??â??â??â??â??â??â??ï??ï??"+
			"ï??ï??ï??â??â??â??â??â??â??â??â??â??â??ï??ï??ï??"+
			"ï??ï??ï??ï??â??â??â??â??â??â??â??â??ï??ï??ï??ï??"+
			"";
	}
}
class MapSakuma extends DotMap
{
	override protected function init():void{
		w = 16;
		h = 16;
		pallet =    [0x000000,    0xD8A36F,    0xffffff,    0xB47856,    0xBE1920,    0x689A39,    0xF3ED71,    0x2F6392,    0x542D28];
		strPallet =    ["ï??",        "â??",        "â??",        "èŒ?",        "èµ?",        "ç??",        "é??",        "é??",        "â??"];
		strMap =
			"ï??ï??ï??èŒ?èŒ?èŒ?èŒ?èŒ?èŒ?èŒ?èŒ?èŒ?èŒ?ï??ï??ï??"+
			"ï??ï??èŒ?èŒ?èŒ?â??â??â??â??â??â??èŒ?èŒ?èŒ?ï??ï??"+
			"ï??ï??èŒ?èŒ?â??â??â??â??â??â??â??â??èŒ?èŒ?ï??ï??"+
			"â??â??èŒ?â??â??â??â??â??â??â??â??â??â??èŒ?â??â??"+
			"â??â??èµ?èµ?èµ?èµ?èµ?â??â??èµ?èµ?èµ?èµ?èµ?â??â??"+
			"â??èŒ?èµ?â??â??â??èµ?â??â??èµ?â??â??â??èµ?èŒ?â??"+
			"â??èŒ?èµ?â??â??â??èµ?èµ?èµ?èµ?â??â??â??èµ?èŒ?â??"+
			"â??â??èµ?â??â??â??èµ?â??â??èµ?â??â??â??èµ?â??â??"+
			"ï??ï??èµ?èµ?èµ?èµ?èµ?â??â??èµ?èµ?èµ?èµ?èµ?ï??ï??"+
			"ï??ï??ï??èŒ?â??â??â??â??â??â??â??â??èŒ?ï??ï??ï??"+
			"ï??ï??ï??ï??èŒ?â??â??â??â??â??â??èŒ?ï??ï??â??â??"+
			"ï??ï??ï??ï??ï??ç??ç??ç??é??ç??ç??ï??ï??â??ï??ï??"+
			"ï??ï??ï??ï??â??ç??ç??é??ç??ç??ç??â??ï??â??ï??ï??"+
			"ï??ï??ï??â??â??ï??ç??ç??ç??ç??ï??â??â??ï??â??ï??"+
			"ï??ï??ï??ï??ï??ï??é??é??é??é??â??ï??ï??ï??â??ï??"+
			"ï??ï??ï??ï??ï??ï??â??ï??ï??â??ï??â??â??â??ï??ï??"+
			"";
	}
}*/